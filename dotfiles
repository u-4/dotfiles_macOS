#!/bin/bash
set -e
OS="$(uname -s)"
DOT_DIRECTORY="${HOME}/.dotfiles"
DOT_TARBALL="https://github.com/u-4/dotfiles/tarball/master"
REMOTE_URL="git@github.com:u-4/dotfiles.git"

has() {
  type "$1" > /dev/null 2>&1
}

# how to use
usage() {
  name=`basename $0`
  cat <<EOF
Usage:
  $name [arguments] [command]

Commands:
  deploy
  initialize
  defaults

Arguments:
  -f $(tput setaf 1)** warning **$(tput sgr0) Overwrite dotfiles.
  -h Print help (this message)
EOF
  exit 1
}

# オプション -fは上書き、-hはヘルプ表示
while getopts :f:h opt; do
  case ${opt} in
    f)
      OVERWRITE=true
      ;;
    h)
      usage
      ;;
  esac
done
shift $((OPTIND - 1))

# Working only OS X.
case ${OSTYPE} in
  darwin*)
    ;;
  *)
    echo $(tput setaf 1)Working only OS X!!$(tput sgr0)
    exit 1
    ;;
esac

# If missing, download and extract the dotfiles repository
if [ ! -d ${DOT_DIRECTORY} ]; then
  echo "Downloading dotfiles..."
  mkdir ${DOT_DIRECTORY}

  if has "git"; then
    git clone --recursive "${REMOTE_URL}" "${DOT_DIRECTORY}"
  else
    curl -fsSLo ${HOME}/dotfiles.tar.gz ${DOT_TARBALL}
    tar -zxf ${HOME}/dotfiles.tar.gz --strip-components 1 -C ${DOT_DIRECTORY}
    rm -f ${HOME}/dotfiles.tar.gz
  fi

  echo $(tput setaf 2)Download dotfiles complete!. ✔︎$(tput sgr0)
fi

cd ${DOT_DIRECTORY}
source ./lib/brew

# Deployの処理
link_files() {
  for f in .??*
  do
    # Force remove the vim directory if it's already there
    [ -n "${OVERWRITE}" -a -e ${HOME}/${f} ] && rm -f ${HOME}/${f}
    if [ ! -e ${HOME}/${f} ]; then
      # If you have ignore files, add file/directory name here
      [[ ${f} = ".git" ]] && continue
      [[ ${f} = ".gitignore" ]] && continue
      ln -snfv ${DOT_DIRECTORY}/${f} ${HOME}/${f}
    fi
  done

  echo $(tput setaf 2)Deploy dotfiles complete!. ✔︎$(tput sgr0)
}

# Initialize処理
initialize() {
  run_brew

#  [ ! -d ${HOME}/.zplug ] && git clone https://github.com/b4b4r07/zplug ${HOME}/.zplug
#  [ ! -d ${HOME}/.tmux/plugins/tpm ] && git clone https://github.com/tmux-plugins/tpm ${HOME}/.tmux/plugins/tpm

 # if has "nodebrew"; then
 #   # Install latest node
 #   current=`nodebrew ls | tail -n 1 | cut -d' ' -f 2`
 #   if [ ${current} = "none"  ]; then
 #     curl -sL git.io/nodebrew | perl - setup
 #     nodebrew install-binary latest
 #     nodebrew use latest
 #   fi
 # fi
 # # Brewで入れたプログラム言語管理コマンド初期処理
 # if has "rbenv"; then
 #   # Install latest ruby
 #   latest=`rbenv install --list | grep -v - | tail -n 1`
 #   current=`rbenv versions | tail -n 1 | grep -oe '\d\.\d\.\d'`
 #   if [ ${current} != ${latest} ]; then
 #     rbenv install ${latest}
 #     rbenv global ${latest}
 #   fi
 # fi
 echo "$(tput setaf 2)Initialize complete!. ✔︎$(tput sgr0)"
}

# defaults
defaults_sh() {
  source ./lib/defaults
}

# 引数により場合分け
command=$1
[ $# -gt 0 ] && shift

case $command in
  deploy)
    link_files
    ;;
  init*)
    initialize
    ;;
  default*)
    defaults_sh
    ;;
  *)
    usage
    ;;
esac

exit 0
